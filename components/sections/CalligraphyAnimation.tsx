import React, { useEffect, useRef, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

// Authentic SVG paths for each character (from Hanzi Writer / Make Me A Hanzi)
const CHARACTERS = [
  {
    char: "问",
    pinyin: "Wèn",
    meaning: "Ask",
    svg: (
      <g>
        <path d="M313 760 Q 338 729 365 698 Q 386 679 405 677 Q 421 676 429 697 Q 432 713 421 737 Q 409 756 381 768 Q 338 789 319 792 Q 309 795 307 781 Q 304 771 313 760 Z" />
        <path d="M189 661 Q 244 529 205 243 Q 198 197 182 149 Q 163 86 202 42 Q 215 26 227 42 Q 261 84 263 251 Q 263 539 276 625 Q 279 646 260 657 Q 233 679 203 688 Q 191 689 184 680 Q 180 673 189 661 Z" />
        <path d="M518 742 Q 502 742 506 732 Q 513 719 536 709 Q 551 700 574 706 Q 766 761 786 732 Q 796 716 802 657 Q 820 416 807 143 Q 806 103 791 91 Q 772 78 678 103 Q 660 104 662 95 Q 663 88 677 82 Q 759 33 804 -7 Q 826 -28 840 -24 Q 853 -21 864 9 Q 880 57 877 126 Q 856 508 858 651 Q 859 691 871 715 Q 883 737 872 749 Q 862 765 813 789 Q 791 801 728 780 Q 599 750 518 742 Z" />
        <path d="M412 483 Q 399 487 371 493 Q 358 497 355 491 Q 348 485 357 468 Q 385 405 403 303 Q 406 273 423 252 Q 442 230 447 245 Q 453 261 451 286 L 447 320 Q 431 420 429 451 C 427 479 427 479 412 483 Z" />
        <path d="M648 346 Q 672 433 705 458 Q 721 477 707 495 Q 638 552 580 523 Q 508 499 412 483 C 382 478 400 445 429 451 L 585 482 Q 603 486 610 479 Q 620 470 618 450 Q 611 395 598 349 C 590 320 640 317 648 346 Z" />
        <path d="M451 286 Q 455 286 463 287 Q 527 300 663 310 Q 673 311 675 320 Q 675 327 648 346 C 633 357 627 356 598 349 Q 514 330 447 320 C 417 315 421 284 451 286 Z" />
      </g>
    ),
    pathLength: 3000,
  },
  {
    char: "思",
    pinyin: "Sī",
    meaning: "Think",
    svg: (
      <g>
        <path d="M293 725 Q 263 741 232 747 Q 225 748 219 743 Q 212 736 223 724 Q 274 655 297 478 Q 306 406 349 384 L 351 383 Q 369 380 369 407 L 366 439 Q 362 463 352 488 Q 321 647 314 689 C 309 717 309 717 293 725 Z" />
        <path d="M623 443 Q 624 442 626 438 Q 648 401 668 392 Q 681 383 698 407 Q 719 444 759 648 Q 769 684 796 712 Q 812 725 798 742 Q 780 761 732 791 Q 711 801 619 780 Q 595 779 417 747 Q 350 734 293 725 C 263 720 285 682 314 689 Q 378 705 470 721 L 510 727 Q 564 739 628 746 Q 674 752 688 736 Q 707 714 703 691 Q 669 504 653 476 Q 649 466 639 461 C 623 442 623 444 623 443 Z" />
        <path d="M532 576 Q 574 583 613 589 Q 638 593 629 607 Q 617 623 589 628 Q 567 632 535 623 L 484 608 Q 436 595 396 583 Q 377 579 400 562 Q 409 556 484 568 L 532 576 Z" />
        <path d="M526 469 Q 529 527 532 576 L 535 623 Q 536 641 537 656 Q 538 669 539 678 Q 546 696 537 705 Q 524 718 510 727 C 485 744 459 749 470 721 Q 480 703 484 615 Q 483 612 484 608 L 484 568 Q 484 525 484 460 C 484 430 524 439 526 469 Z" />
        <path d="M369 407 Q 415 422 623 443 C 653 446 656 446 639 461 Q 632 468 616 479 Q 598 488 526 469 L 484 460 Q 420 448 366 439 C 336 434 340 399 369 407 Z" />
        <path d="M206 303 Q 179 236 142 175 Q 121 142 140 105 Q 147 86 170 100 Q 192 116 208 150 Q 230 199 233 243 Q 237 277 231 303 Q 225 312 219 313 Q 210 312 206 303 Z" />
        <path d="M330 268 Q 345 154 432 90 Q 480 56 561 41 Q 633 22 726 20 Q 787 23 834 40 Q 862 50 865 68 Q 869 78 830 110 Q 772 170 729 230 Q 717 248 712 241 Q 708 234 712 219 Q 749 108 730 93 Q 717 87 686 86 Q 497 86 422 161 Q 386 194 372 249 Q 366 274 354 279 Q 341 286 333 283 Q 327 282 330 268 Z" />
        <path d="M487 324 Q 539 266 574 250 Q 590 247 599 261 Q 605 274 602 291 Q 590 336 502 362 Q 501 363 500 363 Q 484 367 473 364 Q 467 363 470 350 Q 471 338 487 324 Z" />
        <path d="M770 367 Q 828 330 898 274 Q 917 258 934 255 Q 943 255 949 267 Q 959 283 939 324 Q 917 373 766 399 Q 756 403 756 390 Q 757 377 770 367 Z" />
      </g>
    ),
    pathLength: 3000,
  },
  {
    char: "修",
    pinyin: "Xiū",
    meaning: "Apply",
    svg: (
      <g>
        <path d="M223 520 Q 269 581 319 663 Q 344 709 367 733 Q 376 743 371 757 Q 367 770 338 791 Q 311 809 293 809 Q 274 806 282 785 Q 297 754 285 728 Q 228 581 74 391 Q 64 381 62 374 Q 59 364 73 366 Q 106 370 197 487 L 223 520 Z" />
        <path d="M197 487 Q 218 424 218 383 Q 217 365 217 345 Q 216 243 188 139 Q 176 88 210 49 Q 211 46 214 44 Q 230 28 242 54 Q 257 94 256 139 Q 259 383 268 439 Q 275 466 266 476 Q 230 515 223 520 C 201 540 188 516 197 487 Z" />
        <path d="M377 385 Q 377 452 382 494 Q 388 513 370 524 Q 357 533 341 540 Q 331 544 322 539 Q 315 533 318 520 Q 346 457 326 293 Q 319 263 345 230 Q 354 220 362 230 Q 377 260 378 334 Q 377 352 377 375 L 377 385 Z" />
        <path d="M531 697 Q 552 736 595 801 Q 605 813 590 827 Q 551 860 525 854 Q 515 853 517 838 Q 529 753 431 630 Q 422 627 389 584 Q 382 569 396 574 Q 415 577 461 617 L 477 632 Q 493 650 509 667 L 531 697 Z" />
        <path d="M570 537 Q 495 456 377 385 C 355 372 355 372 377 375 Q 384 375 401 379 Q 489 413 564 471 Q 583 486 604 506 L 627 531 Q 672 583 724 663 Q 734 681 744 690 Q 757 699 751 708 Q 744 720 711 733 Q 692 745 654 726 Q 620 713 531 697 C 501 692 480 676 509 667 Q 542 654 562 662 Q 659 693 667 692 Q 674 688 663 675 Q 626 608 589 560 L 570 537 Z" />
        <path d="M461 617 Q 500 604 570 537 L 604 506 Q 661 449 783 369 Q 814 350 856 363 Q 911 379 951 390 Q 964 394 976 401 Q 982 410 969 416 Q 953 420 830 436 Q 748 446 627 531 L 589 560 Q 559 584 527 611 Q 506 630 477 632 C 447 637 433 629 461 617 Z" />
        <path d="M578 429 Q 566 378 444 282 Q 426 270 449 272 Q 510 279 601 364 Q 625 388 637 398 Q 646 407 644 415 Q 643 427 621 434 Q 597 444 587 441 Q 580 440 578 429 Z" />
        <path d="M631 341 Q 616 269 429 131 Q 410 118 434 120 Q 510 126 657 272 Q 681 297 694 308 Q 704 318 702 326 Q 699 338 677 346 Q 652 356 641 354 Q 634 353 631 341 Z" />
        <path d="M676 235 Q 676 160 528 47 Q 524 46 522 43 Q 480 12 380 -45 Q 370 -48 380 -53 Q 446 -59 587 35 Q 590 38 594 40 Q 643 77 726 158 Q 736 168 744 173 Q 753 176 753 186 Q 753 213 716 237 Q 697 247 686 248 Q 677 248 676 235 Z" />
      </g>
    ),
    pathLength: 3000,
  },
  {
    char: "静",
    pinyin: "Jìng",
    meaning: "Be still",
    svg: (
      <g>
        <path d="M372 653 Q 478 677 483 680 Q 490 687 486 694 Q 480 704 455 711 Q 433 715 375 696 L 323 682 Q 253 669 200 664 Q 169 660 191 644 Q 230 623 277 635 Q 299 639 323 643 L 372 653 Z" />
        <path d="M364 552 Q 389 559 415 564 Q 446 573 451 577 Q 458 584 455 591 Q 448 600 425 605 Q 407 608 367 595 L 323 581 Q 310 580 301 575 Q 258 565 206 558 Q 178 552 198 540 Q 231 522 298 538 Q 310 541 323 543 L 364 552 Z" />
        <path d="M360 496 Q 361 524 364 552 L 367 595 Q 368 625 372 653 L 375 696 Q 375 723 391 779 Q 394 789 376 802 Q 345 820 322 824 Q 307 827 300 819 Q 293 812 301 798 Q 320 771 320 752 Q 321 718 323 682 L 323 643 Q 323 613 323 581 L 323 543 Q 322 518 321 487 C 320 457 359 466 360 496 Z" />
        <path d="M321 487 Q 149 451 88 445 Q 76 444 73 436 Q 70 426 85 415 Q 121 388 161 402 Q 320 456 473 477 Q 489 478 490 486 Q 491 498 474 506 Q 449 518 427 512 Q 390 505 360 496 L 321 487 Z" />
        <path d="M247 201 Q 248 234 253 258 L 256 283 Q 259 328 264 347 C 267 361 267 361 259 370 Q 246 391 212 391 Q 200 388 205 377 Q 239 286 194 144 Q 166 84 191 48 Q 195 36 205 41 Q 242 68 243 168 Q 243 171 244 173 L 247 201 Z" />
        <path d="M264 347 Q 348 375 365 369 Q 374 365 372 344 Q 384 214 377 113 Q 376 92 365 89 Q 355 85 304 93 Q 294 94 294 88 Q 295 82 309 75 Q 340 51 364 25 Q 377 12 390 14 Q 403 17 419 54 Q 438 91 435 129 Q 428 220 421 303 Q 418 337 432 363 Q 441 376 429 387 Q 414 399 383 408 Q 365 415 352 406 Q 342 399 320 391 Q 283 378 259 370 C 231 360 235 338 264 347 Z" />
        <path d="M253 258 Q 256 258 260 258 Q 308 268 343 275 Q 362 279 353 290 Q 343 300 322 303 Q 280 306 256 283 C 234 263 229 258 253 258 Z" />
        <path d="M244 173 Q 302 185 346 191 Q 365 195 357 206 Q 347 218 326 220 Q 302 221 247 201 C 219 191 215 167 244 173 Z" />
        <path d="M609 668 Q 627 689 648 715 Q 663 736 675 745 Q 682 752 679 764 Q 678 774 656 792 Q 637 808 622 808 Q 609 807 613 790 Q 632 748 506 599 Q 499 592 496 587 Q 493 580 504 580 Q 525 584 593 651 L 609 668 Z" />
        <path d="M659 527 Q 755 632 786 651 Q 802 661 792 673 Q 779 685 745 705 Q 729 711 715 701 Q 708 697 642 676 Q 626 672 609 668 C 580 661 573 659 593 651 Q 605 639 687 656 Q 694 657 697 655 Q 701 652 696 643 Q 662 570 640 536 Q 634 529 632 521 C 620 493 639 505 659 527 Z" />
        <path d="M802 340 Q 809 385 818 412 L 837 461 Q 847 482 861 495 Q 877 513 862 529 Q 846 541 795 563 Q 779 569 758 560 Q 706 539 659 527 L 632 521 Q 577 509 520 502 Q 505 501 507 492 Q 510 485 526 479 Q 548 469 580 480 Q 586 481 596 483 L 631 491 Q 685 504 740 514 Q 761 520 769 511 Q 781 501 776 448 L 770 408 Q 763 374 756 341 C 750 312 797 310 802 340 Z" />
        <path d="M818 412 Q 858 416 906 417 Q 957 417 964 426 Q 968 436 954 448 Q 900 484 842 463 Q 839 463 837 461 L 776 448 Q 689 436 668 427 L 620 419 Q 550 409 474 395 Q 456 394 470 379 Q 483 367 498 363 Q 516 359 530 364 Q 573 377 625 387 L 671 395 Q 687 401 770 408 L 818 412 Z" />
        <path d="M632 313 Q 568 303 515 295 Q 494 294 507 276 Q 519 260 572 269 Q 597 275 634 279 L 682 286 Q 742 295 820 302 Q 830 303 832 312 Q 832 319 802 340 C 790 349 785 348 756 341 Q 716 332 679 323 L 632 313 Z" />
        <path d="M625 387 Q 629 353 632 313 L 634 279 Q 634 120 620 83 Q 616 74 612 66 Q 611 60 604 58 Q 591 55 508 75 Q 501 76 498 73 Q 497 69 505 61 Q 563 9 595 -30 Q 605 -43 613 -41 Q 623 -40 643 -21 Q 688 18 689 157 Q 686 262 682 286 L 679 323 Q 675 377 672 393 Q 671 394 671 395 L 668 427 Q 668 440 668 452 Q 667 470 656 477 Q 643 486 631 491 C 604 505 582 509 596 483 Q 612 459 620 419 L 625 387 Z" />
      </g>
    ),
    pathLength: 3000,
  },
];

const ANIMATION_DURATION = 1.8; // seconds per character stroke
const DELAY_BETWEEN = 0.5; // seconds between characters
const LOOP_DELAY = 10; // seconds before looping

export default function CalligraphyAnimation() {
  const [index, setIndex] = useState(0);
  const [loop, setLoop] = useState(0);

  useEffect(() => {
    if (index < CHARACTERS.length - 1) {
      const timer = setTimeout(
        () => setIndex(index + 1),
        (ANIMATION_DURATION + DELAY_BETWEEN) * 1000
      );
      return () => clearTimeout(timer);
    } else {
      const timer = setTimeout(() => {
        setIndex(0);
        setLoop(loop + 1);
      }, LOOP_DELAY * 1000);
      return () => clearTimeout(timer);
    }
  }, [index, loop]);

  return (
    <div className="flex flex-col items-center justify-center w-full h-full">
      <div className="flex flex-row md:flex-col gap-8 md:gap-4 items-center justify-center">
        {CHARACTERS.map((item, i) => (
          <div
            key={item.char}
            className={`flex flex-col items-center transition-opacity duration-500 ${
              i > index ? "opacity-30" : "opacity-100"
            }`}
            style={{ minWidth: 90, minHeight: 120 }}
          >
            <svg
              width="90"
              height="120"
              viewBox="0 0 160 200"
              style={{ display: "block" }}
            >
              <AnimatePresence>
                {i === index && (
                  <motion.g
                    initial={{ pathLength: 0 }}
                    animate={{ pathLength: 1 }}
                    transition={{
                      duration: ANIMATION_DURATION,
                      ease: "easeInOut",
                    }}
                  >
                    {React.cloneElement(item.svg, {
                      style: { filter: "drop-shadow(0 2px 8px #0002)" },
                      stroke: "#222",
                      strokeWidth: 6,
                    })}
                  </motion.g>
                )}
                {i < index && <g>{item.svg}</g>}
              </AnimatePresence>
            </svg>
            <motion.div
              initial={{ opacity: 0, y: 12 }}
              animate={{ opacity: i <= index ? 1 : 0.3, y: 0 }}
              transition={{
                duration: 0.7,
                delay: i === index ? ANIMATION_DURATION * 0.7 : 0,
              }}
              className="mt-2 text-lg md:text-xl font-serif text-gray-700"
              style={{ letterSpacing: 2 }}
            >
              {item.pinyin}
            </motion.div>
          </div>
        ))}
      </div>
    </div>
  );
}
